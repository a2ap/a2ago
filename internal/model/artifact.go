package model

import (
	"encoding/json"
)

// Artifact represents an artifact produced by a task during agent execution.
// Artifacts are structured outputs generated by agents as they process tasks.
// They represent discrete pieces of work or content that can be created, modified,
// or referenced throughout the task lifecycle. Artifacts provide a way to track
// and manage the tangible outputs of agent processing.
//
// Key characteristics:
// - Each artifact has a unique identifier within the task context
// - Artifacts can contain multiple parts of different types (text, files, data)
// - They can be incrementally updated through TaskArtifactUpdateEvent objects
// - Metadata provides additional context for processing or display purposes
//
// Common artifact types include:
// - Generated documents or reports
// - Code files or scripts
// - Data analysis results
// - Configuration files
// - Media content
type Artifact struct {
	// ArtifactID is the unique identifier of the artifact
	ArtifactID string `json:"artifactId"`

	// Name is the name of the artifact
	Name string `json:"name"`

	// Description is an optional description of the artifact
	Description string `json:"description,omitempty"`

	// Parts are the parts that make up the artifact content
	Parts []Part `json:"parts"`

	// Metadata is optional metadata associated with the artifact
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewArtifact creates a new Artifact with the given ID and name
func NewArtifact(artifactID, name string) *Artifact {
	return &Artifact{
		ArtifactID: artifactID,
		Name:       name,
	}
}

// WithDescription sets the description for the artifact
func (a *Artifact) WithDescription(description string) *Artifact {
	a.Description = description
	return a
}

// WithParts sets the parts for the artifact
func (a *Artifact) WithParts(parts []Part) *Artifact {
	a.Parts = parts
	return a
}

// WithMetadata sets the metadata for the artifact
func (a *Artifact) WithMetadata(metadata map[string]interface{}) *Artifact {
	a.Metadata = metadata
	return a
}

// AddPart adds a part to the artifact
func (a *Artifact) AddPart(part Part) *Artifact {
	if a.Parts == nil {
		a.Parts = make([]Part, 0)
	}
	a.Parts = append(a.Parts, part)
	return a
}

// SetMetadata sets a metadata key-value pair
func (a *Artifact) SetMetadata(key string, value interface{}) *Artifact {
	if a.Metadata == nil {
		a.Metadata = make(map[string]interface{})
	}
	a.Metadata[key] = value
	return a
}

// MarshalJSON implements the json.Marshaler interface
func (a *Artifact) MarshalJSON() ([]byte, error) {
	type Alias Artifact
	return json.Marshal(&struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface
func (a *Artifact) UnmarshalJSON(data []byte) error {
	type Alias Artifact
	aux := &struct {
		*Alias
	}{
		Alias: (*Alias)(a),
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	return nil
}
